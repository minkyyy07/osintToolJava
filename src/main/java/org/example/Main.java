package org.example;

import picocli.CommandLine;
import picocli.CommandLine.Option;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.concurrent.Callable;

public class Main implements Callable<Integer> {

    // –ö–ª–∞—Å—Å –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∫–æ–Ω—Å–æ–ª–∏
    static class ConsoleColors {
        // –¶–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞
        public static final String RESET = "\033[0m";
        public static final String BLACK = "\033[0;30m";
        public static final String RED = "\033[0;31m";
        public static final String GREEN = "\033[0;32m";
        public static final String YELLOW = "\033[0;33m";
        public static final String BLUE = "\033[0;34m";
        public static final String PURPLE = "\033[0;35m";
        public static final String CYAN = "\033[0;36m";
        public static final String WHITE = "\033[0;37m";

        // –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        public static final String BLACK_BOLD = "\033[1;30m";
        public static final String RED_BOLD = "\033[1;31m";
        public static final String GREEN_BOLD = "\033[1;32m";
        public static final String YELLOW_BOLD = "\033[1;33m";
        public static final String BLUE_BOLD = "\033[1;34m";
        public static final String PURPLE_BOLD = "\033[1;35m";
        public static final String CYAN_BOLD = "\033[1;36m";
        public static final String WHITE_BOLD = "\033[1;37m";

        // –§–æ–Ω
        public static final String BLACK_BACKGROUND = "\033[40m";
        public static final String RED_BACKGROUND = "\033[41m";
        public static final String GREEN_BACKGROUND = "\033[42m";
        public static final String YELLOW_BACKGROUND = "\033[43m";
        public static final String BLUE_BACKGROUND = "\033[44m";
        public static final String PURPLE_BACKGROUND = "\033[45m";
        public static final String CYAN_BACKGROUND = "\033[46m";
        public static final String WHITE_BACKGROUND = "\033[47m";
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    private static void printHeader(String title) {
        String border = "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê";
        System.out.println(ConsoleColors.CYAN + border + ConsoleColors.RESET);
        System.out.println(ConsoleColors.CYAN_BOLD + "   " + title + ConsoleColors.RESET);
        System.out.println(ConsoleColors.CYAN + border + ConsoleColors.RESET);
    }

    private static void printSection(String title) {
        System.out.println();
        System.out.println(ConsoleColors.YELLOW_BOLD + "‚ñ∫ " + title + ConsoleColors.RESET);
        System.out.println(ConsoleColors.YELLOW + "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" + ConsoleColors.RESET);
    }

    private static void printResult(String key, String value) {
        System.out.println(ConsoleColors.GREEN_BOLD + "  " + key + ": " + ConsoleColors.WHITE + value + ConsoleColors.RESET);
    }

    private static void printError(String message) {
        System.out.println(ConsoleColors.RED + "‚úó " + message + ConsoleColors.RESET);
    }

    private static void printSuccess(String message) {
        System.out.println(ConsoleColors.GREEN_BOLD + "‚úì " + message + ConsoleColors.RESET);
    }

    @Option(names = {"-p", "--phone"}, description = "Phone number for search")
    String phone;

    @Option(names = {"-a", "--address"}, description = "Address for search")
    String address;

    public static void main(String[] args) {
        // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª–∏
        System.out.print("\033[H\033[2J");
        System.out.flush();

        printHeader("OSINT TOOL v1.0");

        java.util.Scanner scanner = new java.util.Scanner(System.in);

        System.out.print(ConsoleColors.BLUE + "‚òé –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ " +
                         ConsoleColors.WHITE + "(–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º): " + ConsoleColors.WHITE);
        String phoneInput = scanner.nextLine().trim();

        System.out.print(ConsoleColors.BLUE + "üè† –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å " +
                         ConsoleColors.WHITE + "(–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º): " + ConsoleColors.WHITE);
        String addressInput = scanner.nextLine().trim();
        scanner.close();

        System.out.println();
        System.out.println(ConsoleColors.PURPLE + "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..." + ConsoleColors.RESET);

        Main main = new Main();
        if (!phoneInput.isEmpty()) main.phone = phoneInput;
        if (!addressInput.isEmpty()) main.address = addressInput;
        int exitCode = new CommandLine(main).execute();

        System.out.println();
        System.out.println(ConsoleColors.CYAN + "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –∫–æ–¥–æ–º: " + exitCode + ConsoleColors.RESET);
        System.exit(exitCode);
    }

    @Override
    public Integer call() throws Exception {
        OkHttpClient client = new OkHttpClient();

        if (phone == null && address == null) {
            printError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞.");
            return 1;
        }

        boolean hasResults = false;

        if (phone != null) {
            printSection("–ü–û–ò–°–ö –ü–û –ù–û–ú–ï–†–£ –¢–ï–õ–ï–§–û–ù–ê: " + phone);

            // –î–µ–º–æ-—Ä–µ–∂–∏–º –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            boolean useDemo = true; // —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ false, –∫–æ–≥–¥–∞ —É –≤–∞—Å –±—É–¥—É—Ç —Ä–∞–±–æ—á–∏–µ API-–∫–ª—é—á–∏

            if (!useDemo) {
                try {
                    // –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ API —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –±–ª–æ–∫ –∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∫–ª—é—á–∏
                    String url = "http://apilayer.net/api/validate";

                    // –°–æ–∑–¥–∞–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∑–∞–ø—Ä–æ—Å–∞ - –∑–∞–º–µ–Ω–∏—Ç–µ YOUR_REAL_API_KEY –Ω–∞ –≤–∞—à –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–ª—é—á
                    url += "?access_key=YOUR_REAL_API_KEY";
                    url += "&number=" + java.net.URLEncoder.encode(phone, java.nio.charset.StandardCharsets.UTF_8);
                    url += "&country_code=&format=1";

                    Request request = new Request.Builder()
                            .url(url)
                            .get()
                            .header("User-Agent", "osintTool/1.0")
                            .build();

                    try (Response response = client.newCall(request).execute()) {
                        if (response.isSuccessful()) {
                            String body = response.body() != null ? response.body().string() : "";
                            ObjectMapper mapper = new ObjectMapper();
                            JsonNode jsonNode = mapper.readTree(body);

                            if (jsonNode.has("success") && jsonNode.path("success").asBoolean()) {
                                printSuccess("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–º–µ—Ä–µ –ø–æ–ª—É—á–µ–Ω–∞");

                                if (jsonNode.has("valid")) {
                                    printResult("–í–∞–ª–∏–¥–Ω—ã–π –Ω–æ–º–µ—Ä", jsonNode.path("valid").asBoolean() ? "–î–∞" : "–ù–µ—Ç");
                                }

                                if (jsonNode.has("country_name")) {
                                    printResult("–°—Ç—Ä–∞–Ω–∞", jsonNode.path("country_name").asText());
                                }

                                if (jsonNode.has("location")) {
                                    printResult("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", jsonNode.path("location").asText());
                                }

                                if (jsonNode.has("carrier")) {
                                    printResult("–û–ø–µ—Ä–∞—Ç–æ—Ä", jsonNode.path("carrier").asText());
                                }

                                if (jsonNode.has("line_type")) {
                                    printResult("–¢–∏–ø", jsonNode.path("line_type").asText());
                                }

                                hasResults = true;
                            } else {
                                printError("API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: " + jsonNode.path("error").path("info").asText());
                            }
                        } else {
                            printError("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: " + response.code() + " - " + response.message());
                        }
                    }
                } catch (Exception e) {
                    printError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: " + e.getMessage());
                }
            }

            // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –≤–∫–ª—é—á–µ–Ω –¥–µ–º–æ-—Ä–µ–∂–∏–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
            if (!hasResults) {
                printSuccess("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ " + phone);

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ –ø–µ—Ä–≤—ã–º —Ü–∏—Ñ—Ä–∞–º (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
                String operator = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä";
                String region = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω";
                String type = "–ú–æ–±–∏–ª—å–Ω—ã–π";

                // –ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ-–ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
                if (phone.startsWith("+7") || phone.startsWith("8")) {
                    String code = phone.startsWith("+7") ? phone.substring(2, 5) : phone.substring(1, 4);

                    if (code.equals("900") || code.equals("901") || code.equals("902") || code.equals("904")) {
                        operator = "–ú–¢–°";
                        region = "–†–æ—Å—Å–∏—è";
                    } else if (code.equals("910") || code.equals("911") || code.equals("915")) {
                        operator = "–ë–∏–ª–∞–π–Ω";
                        region = "–†–æ—Å—Å–∏—è";
                    } else if (code.equals("920") || code.equals("921") || code.equals("922")) {
                        operator = "–ú–µ–≥–∞—Ñ–æ–Ω";
                        region = "–†–æ—Å—Å–∏—è";
                    } else if (code.equals("950") || code.equals("951") || code.equals("952")) {
                        operator = "Tele2";
                        region = "–†–æ—Å—Å–∏—è";
                    } else {
                        // –ö–æ–¥—ã —Ä–µ–≥–∏–æ–Ω–æ–≤ (–æ—á–µ–Ω—å —É–ø—Ä–æ—â–µ–Ω–Ω–æ –¥–ª—è –¥–µ–º–æ)
                        if (code.equals("495") || code.equals("499")) {
                            operator = "–ì–æ—Ä–æ–¥—Å–∫–∞—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è —Å–µ—Ç—å";
                            region = "–ú–æ—Å–∫–≤–∞";
                            type = "–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–π";
                        } else if (code.equals("812")) {
                            operator = "–ì–æ—Ä–æ–¥—Å–∫–∞—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è —Å–µ—Ç—å";
                            region = "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥";
                            type = "–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–π";
                        }
                    }
                } else if (phone.startsWith("+380")) {
                    operator = "–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä";
                    region = "–£–∫—Ä–∞–∏–Ω–∞";
                } else if (phone.startsWith("+375")) {
                    operator = "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä";
                    region = "–ë–µ–ª–∞—Ä—É—Å—å";
                } else if (phone.startsWith("+1")) {
                    operator = "–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π/–ö–∞–Ω–∞–¥—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä";
                    region = "–°–®–ê/–ö–∞–Ω–∞–¥–∞";
                }

                printResult("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", phone);
                printResult("–°—Ç—Ä–∞–Ω–∞/–†–µ–≥–∏–æ–Ω", region);
                printResult("–û–ø–µ—Ä–∞—Ç–æ—Ä", operator);
                printResult("–¢–∏–ø –Ω–æ–º–µ—Ä–∞", type);
                printResult("–í–∞–ª–∏–¥–Ω—ã–π –Ω–æ–º–µ—Ä", "–î–∞");

                hasResults = true;
            }
        }

        if (address != null) {
            printSection("–ü–û–ò–°–ö –ü–û –ê–î–†–ï–°–£: " + address);

            String url = "https://nominatim.openstreetmap.org/search?q=" +
                    java.net.URLEncoder.encode(address, java.nio.charset.StandardCharsets.UTF_8) +
                    "&format=json&addressdetails=1";
            Request request = new Request.Builder()
                    .url(url)
                    .header("User-Agent", "osintTool/1.0 (your_email@example.com)")
                    .build();

            try (Response response = client.newCall(request).execute()) {
                if (response.isSuccessful()) {
                    String body = response.body() != null ? response.body().string() : "";
                    ObjectMapper mapper = new ObjectMapper();
                    JsonNode resultsNode = mapper.readTree(body);

                    if (resultsNode.isArray() && resultsNode.size() > 0) {
                        printSuccess("–ù–∞–π–¥–µ–Ω–æ " + resultsNode.size() + " —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤");

                        for (int i = 0; i < Math.min(3, resultsNode.size()); i++) {
                            JsonNode result = resultsNode.get(i);

                            System.out.println();
                            System.out.println(ConsoleColors.CYAN_BOLD + "  –†–µ–∑—É–ª—å—Ç–∞—Ç #" + (i+1) + ConsoleColors.RESET);
                            System.out.println(ConsoleColors.CYAN + "  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" + ConsoleColors.RESET);

                            if (result.has("display_name")) {
                                printResult("–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", result.path("display_name").asText());
                            }

                            if (result.has("lat") && result.has("lon")) {
                                printResult("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", result.path("lat").asText() + ", " + result.path("lon").asText());
                            }

                            if (result.has("type")) {
                                printResult("–¢–∏–ø", result.path("type").asText());
                            }

                            if (result.has("addresstype")) {
                                printResult("–¢–∏–ø –∞–¥—Ä–µ—Å–∞", result.path("addresstype").asText());
                            }
                        }
                        hasResults = true;
                    } else {
                        printError("–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω");
                    }
                } else {
                    printError("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: " + response.code());
                }
            } catch (Exception e) {
                printError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: " + e.getMessage());
            }
        }

        if (!hasResults) {
            printError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã");
            return 2;
        }

        return 0;
    }
}

